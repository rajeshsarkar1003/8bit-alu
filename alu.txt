//8 BIT ALU

`timescale 1ns / 1ps
module alu(
  op1,op2,opcode,flagz,flagc,result);
  
  //inputs
  input [7:0] op1,op2;
  input [2:0]opcode;
  
  //outputs
  output reg [15:0] result;
  output reg flagz,flagc;
  
 //paramaters
  parameter [2:0]ADD=3'b000,
                  SUB=3'b001,
                  MULT=3'b010,
                  AND=3'b011,
                  OR=3'b100,
                  NAND=3'b101,
                  NOR=3'b110,
                  XOR=3'b111; 
  

  
  always@(opcode or op1 or op2)
  
    begin
      case (opcode)
        ADD : 
          begin
            result= op1+op2;
            flagz=(result == 16'b0);
            flagc= result[8];
          end
        
        SUB:
          begin
            result=op1-op2;
            flagz=(result == 16'b0);
            flagc= result[8];
          end
        
        MULT:
          begin
            result= op1*op2;
            flagz=(result == 16'b0); 
            flagc= result[8];
          end
        
        AND:
          begin
             result=op1&op2;
            flagz=(result == 16'b0); 
            flagc= result[8];
          end
        
        OR:
        begin
          result= op1 | op2;
         flagz=(result == 16'b0);
          flagc= result[8];
        end
        
        NAND:
        begin
          result= ~(op1&op2);
          flagz=(result == 16'b0); 
          flagc= result[8];
        end
        
        NOR:
        begin
          result= ~(op1 | op2);
          flagz=(result == 16'b0); 
          flagc= result[8];
        end
        
        XOR:
          begin
          result= op1^op2;
        flagz=(result == 16'b0);
        flagc= result[8];
          end
        
        default: 
          begin
          result= 16'b0;
        flagz=1'b0;
        flagc=1'b0;
          end
      endcase
    end
endmodule
        
        
        
      
         
            
          
  
  
  
  
  